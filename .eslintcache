[{"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\index.tsx":"1","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-reducer.ts":"2","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\redux-store.ts":"3","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Preloader\\Preloader.tsx":"4","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Music\\Music.tsx":"5","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Settings\\Settings.tsx":"6","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\News\\News.tsx":"7","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogsContainer.tsx":"8","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\dialogs-reducer.ts":"9","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\sidebar-reducer.ts":"10","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-reducer.ts":"11","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-reducer.ts":"12","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-selectors.ts":"13","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\hoc\\withAuthRedirect.tsx":"14","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Dialogs.tsx":"15","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\Users.tsx":"16","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\Profile.tsx":"17","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\api.ts":"18","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\object-utils.ts":"19","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\validators\\validators.ts":"20","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\User.tsx":"21","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"22","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx":"23","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\AddPost.tsx":"24","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\FormsControls.tsx":"25","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Message\\Message.tsx":"26","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx":"27","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Button\\ButtonUpload.tsx":"28","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileDataEdit.tsx":"29","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Errors\\404.tsx":"30","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\profile-reducer.ts":"31","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\Captcha.tsx":"32","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\security-api.ts":"33","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\profile-api.ts":"34","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\users-api.ts":"35","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\auth-api.ts":"36","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\App.tsx":"37","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"38","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UserSearchForm.tsx":"39","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\CreateAntFields.jsx":"40","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UsersPage.tsx":"41","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginPage.tsx":"42","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginForm.tsx":"43","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileContainer.tsx":"44","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Header\\MainHeader.tsx":"45","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\SiderMenu\\SiderMenu.tsx":"46","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-selectors.ts":"47","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-selectors.ts":"48","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\ChatPage.tsx":"49","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\Messages.tsx":"50","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\AddMessageForm.tsx":"51","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\ChatPage2.tsx":"52"},{"size":221,"mtime":1613011947516,"results":"53","hashOfConfig":"54"},{"size":1075,"mtime":1612437976416,"results":"55","hashOfConfig":"54"},{"size":1524,"mtime":1612453539480,"results":"56","hashOfConfig":"54"},{"size":298,"mtime":1611937464195,"results":"57","hashOfConfig":"54"},{"size":178,"mtime":1611663887886,"results":"58","hashOfConfig":"54"},{"size":186,"mtime":1611663887902,"results":"59","hashOfConfig":"54"},{"size":165,"mtime":1611663887869,"results":"60","hashOfConfig":"54"},{"size":1225,"mtime":1612773019612,"results":"61","hashOfConfig":"54"},{"size":1198,"mtime":1612455556361,"results":"62","hashOfConfig":"54"},{"size":242,"mtime":1611648611337,"results":"63","hashOfConfig":"54"},{"size":3054,"mtime":1612945774233,"results":"64","hashOfConfig":"54"},{"size":5120,"mtime":1612876456845,"results":"65","hashOfConfig":"54"},{"size":942,"mtime":1612864370247,"results":"66","hashOfConfig":"54"},{"size":676,"mtime":1612783569561,"results":"67","hashOfConfig":"54"},{"size":2301,"mtime":1612771525100,"results":"68","hashOfConfig":"54"},{"size":3311,"mtime":1612972017739,"results":"69","hashOfConfig":"54"},{"size":1384,"mtime":1612799446452,"results":"70","hashOfConfig":"54"},{"size":453,"mtime":1612429483327,"results":"71","hashOfConfig":"54"},{"size":263,"mtime":1612440273858,"results":"72","hashOfConfig":"54"},{"size":1395,"mtime":1611992458636,"results":"73","hashOfConfig":"54"},{"size":1993,"mtime":1612945680930,"results":"74","hashOfConfig":"54"},{"size":3410,"mtime":1612799337089,"results":"75","hashOfConfig":"54"},{"size":2153,"mtime":1612786296262,"results":"76","hashOfConfig":"54"},{"size":1329,"mtime":1612790949076,"results":"77","hashOfConfig":"54"},{"size":729,"mtime":1612189400643,"results":"78","hashOfConfig":"54"},{"size":361,"mtime":1612458695642,"results":"79","hashOfConfig":"54"},{"size":470,"mtime":1612850771364,"results":"80","hashOfConfig":"54"},{"size":405,"mtime":1611919509534,"results":"81","hashOfConfig":"54"},{"size":2440,"mtime":1612796778481,"results":"82","hashOfConfig":"54"},{"size":373,"mtime":1611919509567,"results":"83","hashOfConfig":"54"},{"size":4309,"mtime":1612796778510,"results":"84","hashOfConfig":"54"},{"size":537,"mtime":1613014299063,"results":"85","hashOfConfig":"54"},{"size":271,"mtime":1612427199846,"results":"86","hashOfConfig":"54"},{"size":1277,"mtime":1612796778614,"results":"87","hashOfConfig":"54"},{"size":885,"mtime":1612879488147,"results":"88","hashOfConfig":"54"},{"size":805,"mtime":1612429483286,"results":"89","hashOfConfig":"54"},{"size":4207,"mtime":1613032546431,"results":"90","hashOfConfig":"54"},{"size":1153,"mtime":1612798028963,"results":"91","hashOfConfig":"54"},{"size":2233,"mtime":1612971157646,"results":"92","hashOfConfig":"54"},{"size":2312,"mtime":1612877108874,"results":"93","hashOfConfig":"54"},{"size":488,"mtime":1613019059979,"results":"94","hashOfConfig":"54"},{"size":773,"mtime":1613014103441,"results":"95","hashOfConfig":"54"},{"size":2326,"mtime":1613014103474,"results":"96","hashOfConfig":"54"},{"size":2910,"mtime":1612966384434,"results":"97","hashOfConfig":"54"},{"size":1569,"mtime":1613014710638,"results":"98","hashOfConfig":"54"},{"size":1192,"mtime":1613019059957,"results":"99","hashOfConfig":"54"},{"size":188,"mtime":1613013408140,"results":"100","hashOfConfig":"54"},{"size":365,"mtime":1613014103428,"results":"101","hashOfConfig":"54"},{"size":778,"mtime":1613028375950,"results":"102","hashOfConfig":"54"},{"size":1329,"mtime":1613029958622,"results":"103","hashOfConfig":"54"},{"size":1493,"mtime":1613032910198,"results":"104","hashOfConfig":"54"},{"size":4207,"mtime":1613040034686,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"1h6w780",{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"108"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"108"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"108"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"108"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\index.tsx",[],["226","227"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-reducer.ts",["228","229"],"import { getAuthData } from './auth-reducer'\r\nimport {AppStateType, BaseThunkType, InferActionsType} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\n\r\n// initial state\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\n// reducer\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'APP/SET_INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\n// actions\r\nconst actions = {\r\n    setInitialized: () => ({ type: 'APP/SET_INITIALIZED' } as const)\r\n}\r\n\r\n// definition types for thunks-creators\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n// thunks\r\nexport const initializeApp = (): ThunkType => async (dispatch: any) => {\r\n    await dispatch(getAuthData())\r\n    dispatch(actions.setInitialized())\r\n}\r\n\r\nexport default appReducer","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\redux-store.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Preloader\\Preloader.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Music\\Music.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Settings\\Settings.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\News\\News.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogsContainer.tsx",["230"],"import React from 'react'\r\nimport {actions, ActionsTypes} from '../../Redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\nimport {DialogType, MessageType} from '../../types/types'\r\n\r\nconst DialogsContainer: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ dialogs, messages, addMessage, isAuth }) => {\r\n\r\n    return <Dialogs dialogs={dialogs}\r\n                    messages={messages}\r\n                    addMessage={addMessage} />\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (formData: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage: actions.addMessage}),\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n\r\n","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\dialogs-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\sidebar-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-reducer.ts",["231"],"import { Dispatch } from 'redux'\r\nimport {APIResponseType, ResultCode} from '../api/api'\r\nimport {usersAPI} from '../api/users-api'\r\nimport { updateObjectInArray } from '../utils/object-utils'\r\nimport { UsersType } from '../types/types'\r\nimport {AppStateType, BaseThunkType, InferActionsType} from './redux-store'\r\n\r\n// initial state\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, // array of user IDs\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n// reducer\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case 'USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollow\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        case 'USERS/SET_PAGE_SIZE':\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case \"USERS/SET_SEARCH_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type SearchFilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\n// actions\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UsersType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setSearchFilter: (filter: SearchFilterType) => ({type: 'USERS/SET_SEARCH_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USERS_COUNT',\r\n        totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleIsFollowing: (isFollow: boolean, userId: number) => ({\r\n        type: 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFollow,\r\n        userId\r\n    } as const),\r\n    setPageSize: (pageSize: number) => ({type: 'USERS/SET_PAGE_SIZE', pageSize} as const)\r\n}\r\n\r\n// definition types for thunks-creators\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n// thunks-creators\r\nexport const requestUsers = (page: number, pageSize: number, filter: SearchFilterType): ThunkType => async (dispatch, getState: any) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setSearchFilter(filter))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userID: number,\r\n                                   apiMethod: (userID: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userID: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleIsFollowing(true, userID))\r\n\r\n    let data = await apiMethod(userID)\r\n\r\n    if (data.resultCode === ResultCode.Success)\r\n        dispatch(actionCreator(userID))\r\n\r\n    dispatch(actions.toggleIsFollowing(false, userID))\r\n}\r\n\r\nexport const follow = (userID: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userID, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (userID: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userID, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-selectors.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Dialogs.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\Users.tsx",["232","233"],"import React, {useEffect} from 'react'\r\nimport style from './Users.module.css'\r\nimport 'antd/dist/antd.css'\r\nimport {Pagination} from 'antd'\r\nimport {User} from './User'\r\nimport {UserSearchForm} from './UserSearchForm'\r\nimport {actions, requestUsers, SearchFilterType} from '../../Redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchFilter,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../Redux/users-selectors\"\r\nimport {useHistory} from 'react-router'\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsersSelector)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getSearchFilter)\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1))\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: any = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        if (pageSize != null) {\r\n            dispatch(actions.setPageSize(pageSize))\r\n            dispatch(requestUsers(pageNumber, pageSize, filter))\r\n        }\r\n        dispatch(actions.setCurrentPage(pageNumber))\r\n    }\r\n\r\n    const setPageSize = (current: number, size: number) => {\r\n        dispatch(actions.setCurrentPage(current))\r\n        dispatch(actions.setPageSize(size))\r\n    }\r\n\r\n    const onSearchFilterChanged = (filter: SearchFilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    return (\r\n        <div className={style.usersPage}>\r\n\r\n            <div>\r\n                <UserSearchForm onSearchFilterChanged={onSearchFilterChanged}/>\r\n            </div>\r\n\r\n            <Pagination defaultCurrent={1}\r\n                        total={totalUsersCount}\r\n                        pageSize={pageSize}\r\n                        onChange={onPageChanged}\r\n                        onShowSizeChange={setPageSize}/>\r\n\r\n            {users.map(user => <User user={user} key={user.id}/>)}\r\n        </div>\r\n    )\r\n}","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\Profile.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\object-utils.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\validators\\validators.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\User.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["234"],"import React, {useState} from 'react'\r\nimport style from './../Profile.module.css'\r\nimport 'antd/dist/antd.css'\r\nimport {Button, Input, message} from 'antd'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataEdit from './ProfileDataEdit'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    error: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, isOwner, status, updateStatus, savePhoto, saveProfile, error }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onChange = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (values: ProfileType) => {\r\n        await saveProfile(values)\r\n        setEditMode(false)\r\n        if (error !== '') message.error(error)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            <div className={style.avatar}>\r\n                <img src={profile.photos.large || userPhoto} alt='Profile Photo'/>\r\n                {isOwner && <Input type={'file'} onChange={onChange}/>}\r\n            </div>\r\n            {editMode ? <ProfileDataEdit profile={profile} handleSubmit={handleSubmit}\r\n                                         deactivateEditMode={() => setEditMode(false)}/>\r\n                      : <ProfileData profile={profile} status={status} updateStatus={updateStatus}\r\n                                     isOwner={isOwner} activateEditMode={() => setEditMode(true)}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    activateEditMode: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, status, updateStatus, isOwner, activateEditMode }) => {\r\n\r\n    return (\r\n        <div className={style.profileDescription}>\r\n\r\n            {isOwner && <Button type='default' onClick={activateEditMode}>Edit</Button>}\r\n            <h3 className={style.name}>{profile.fullName}</h3>\r\n            <ProfileStatus status={status}\r\n                           updateStatus={updateStatus} />\r\n            <div>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            {profile.lookingForAJob && <div>My skills: {profile.lookingForAJobDescription}</div>}\r\n            <div>About me: {profile.aboutMe}</div>\r\n            <div>\r\n                Contacts:\r\n\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div>\r\n            {contactValue && <div>{contactTitle}: {contactValue}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx",["235","236"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../../Redux/redux-store'\r\nimport { PostType } from '../../../../types/types'\r\nimport { Avatar, List, Space } from 'antd'\r\nimport { FieldTimeOutlined, LikeOutlined, StarOutlined } from '@ant-design/icons'\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    login: string | null\r\n}\r\n\r\nconst IconText: React.FC<{ icon: any, text: any }> = ({ icon, text }) => {\r\n    return (\r\n        <Space>\r\n            {React.createElement(icon)}\r\n            {text}\r\n        </Space>\r\n    )\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = React.memo(({ login, posts }) => {\r\n    return (\r\n        <List\r\n            itemLayout=\"vertical\"\r\n            size=\"large\"\r\n            pagination={{\r\n                onChange: page => {\r\n                    console.log(page);\r\n                },\r\n                pageSize: 10,\r\n            }}\r\n            dataSource={posts}\r\n\r\n            renderItem={ (item: any) => (\r\n                <List.Item\r\n                    key={item.id}\r\n                    actions={[\r\n                        <IconText icon={StarOutlined} text=\"156\" key=\"list-vertical-star-o\" />,\r\n                        <IconText icon={LikeOutlined} text={item.likesCount} key=\"list-vertical-like-o\" />,\r\n                        <IconText icon={FieldTimeOutlined} text={item.date} key=\"list-vertical-message\" />,\r\n                    ]}\r\n\r\n                >\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar src={item.avatar} />}\r\n                        title={login}\r\n                        description={item.message}\r\n                    />\r\n                    {item.content}\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n})\r\n\r\n\r\n// type MapStateToPropsType = {\r\n//     posts: Array<PostType>\r\n//     login: string | null\r\n// }\r\n//\r\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         posts: state.profilePage.posts,\r\n//         login: state.auth.login\r\n//     }\r\n// }\r\n//\r\n// let PostsContainer = connect(mapStateToProps, null)(Posts)\r\n\r\nexport default Posts","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\AddPost.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\FormsControls.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Message\\Message.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Button\\ButtonUpload.tsx",[],["237","238"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileDataEdit.tsx",["239","240","241","242"],"import './ProfileDataEdit.css'\r\nimport 'antd/dist/antd.css'\r\nimport React from 'react'\r\nimport {Button, Form, Input, Select} from 'antd'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\nconst { Option } = Select\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    handleSubmit: (values: ProfileType) => void\r\n    deactivateEditMode: () => void\r\n}\r\n\r\nconst ProfileDataEdit: React.FC<PropsType> = ({ handleSubmit, profile, deactivateEditMode }) => {\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    }\r\n\r\n    const validateMessages = {\r\n        required: '${label} is required!',\r\n        types: {\r\n            email: '${label} is not a valid email!',\r\n            number: '${label} is not a valid number!',\r\n        },\r\n        number: {\r\n            range: '${label} must be between ${min} and ${max}',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Form {...layout} name=\"editProfile\"\r\n              onFinish={handleSubmit}\r\n              validateMessages={validateMessages}\r\n              initialValues={{ ...profile }}>\r\n\r\n            <Form.Item name=\"fullName\" label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"lookingForAJob\" label=\"Looking for a job\" rules={[{ required: true }]}>\r\n                <Select>\r\n                    <Option value={true as any}>Yes</Option>\r\n                    <Option value={false as any}>No</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name=\"lookingForAJobDescription\" label=\"My skills\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"aboutMe\" label=\"About me\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            {Object.keys(profile.contacts).map(key => {\r\n                return <Form.Item name={['contacts', key]} label={key}>\r\n                            <Input />\r\n                        </Form.Item>\r\n            })}\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType=\"button\" onClick={deactivateEditMode}>\r\n                    Cancel\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ProfileDataEdit","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Errors\\404.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\profile-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\Captcha.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\security-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\profile-api.ts",["243"],"import {PhotosType, ProfileType, ProfileTypeForSave} from '../types/types'\r\nimport {instance, ResultCode, APIResponseType} from './api'\r\n\r\ntype PhotosResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileData(userID: number | null) {\r\n        return instance.get<ProfileType>(`profile/` + userID)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>('profile/status/' + userID)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>('profile/status/', { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(image: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", image);\r\n        return instance.put<APIResponseType<PhotosResponseDataType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileTypeForSave) {\r\n        return instance.put<APIResponseType<PhotosResponseDataType>>('profile', profile)\r\n            .then(response => response.data)\r\n    }\r\n}","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\users-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\auth-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\App.tsx",["244"],"import React, {lazy, Suspense, useEffect} from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport './App.css'\r\nimport {Layout} from 'antd'\r\nimport {compose} from 'redux'\r\nimport {Provider, useDispatch, useSelector} from 'react-redux'\r\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport Music from './Components/Music/Music'\r\nimport Settings from './Components/Settings/Settings'\r\nimport News from './Components/News/News'\r\nimport {MainHeader} from './Components/Header/MainHeader'\r\nimport {initializeApp} from './Redux/app-reducer'\r\nimport Preloader from './Components/common/Preloader/Preloader'\r\nimport {LoginPage} from './Components/Login/LoginPage'\r\nimport store from './Redux/redux-store'\r\nimport ProfileContainer from './Components/Profile/ProfileContainer'\r\nimport Error404 from './Components/common/Errors/404'\r\nimport {SiderMenu} from './Components/SiderMenu/SiderMenu'\r\nimport {getInitialized} from './Redux/app-selectors'\r\n\r\nconst DialogsContainer = lazy(() => import(\"./Components/Dialogs/DialogsContainer\"))\r\nconst UsersPage: any = lazy(() => import(\"./Components/Users/UsersPage\"))\r\nconst ChatPage2 = lazy(() => import(\"./Components/Pages/Chat/ChatPage2\"))\r\n\r\nconst {Header, Content, Footer} = Layout\r\n\r\nconst App: React.FC = () => {\r\n\r\n    /*catchAllUnhandledErrors = (e: any) => {\r\n        alert('Some error occurred')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unHandledRejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unHandledRejection', this.catchAllUnhandledErrors)\r\n    }*/\r\n\r\n    const initialized = useSelector(getInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if (!initialized)\r\n        return <Preloader/>\r\n    else\r\n        return (\r\n            <Layout className=\"container\">\r\n                <Header>\r\n                    <MainHeader/>\r\n                </Header>\r\n                <Layout>\r\n                    <SiderMenu/>\r\n                    <Layout style={{padding: '0 24px 24px'}}>\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}\r\n                        >\r\n\r\n                            <div>\r\n                                <Suspense fallback={<div>Loading...</div>}>\r\n                                    <Switch>\r\n                                        <Route exact path='/' children={() => <Redirect to=\"/profile\"/>}/>\r\n                                        <Route path='/profile/:userId?' component={ProfileContainer as React.FC}/>\r\n                                        <Route path='/dialogs' component={DialogsContainer}/>\r\n                                        <Route path='/news' component={News}/>\r\n                                        <Route path='/music' component={Music}/>\r\n                                        <Route path='/settings' component={Settings}/>\r\n                                        <Route path='/users' component={UsersPage}/>\r\n                                        <Route path='/login' component={LoginPage}/>\r\n                                        <Route path='/chat' component={ChatPage2}/>\r\n                                        <Route path='*' component={Error404}/>\r\n                                    </Switch>\r\n                                </Suspense>\r\n                            </div>\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n\r\n                <Footer style={{textAlign: 'center'}}>2021 Created by Alexey Lomshakov</Footer>\r\n            </Layout>\r\n        )\r\n}\r\n\r\nconst AppContainer = compose<React.ComponentType>(withRouter)(App)\r\n\r\nexport const MainApp: React.FC = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <AppContainer/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    )\r\n}","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UserSearchForm.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\CreateAntFields.jsx",[],["245","246"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UsersPage.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginPage.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginForm.tsx",["247"],"import 'antd/dist/antd.css'\r\nimport React, { useState } from 'react'\r\nimport { Form, Input, Button, Checkbox, Alert, Modal } from 'antd'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../Redux/auth-reducer'\r\nimport Captcha from './Captcha'\r\nimport { AppStateType } from '../../Redux/redux-store'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 }\r\n}\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 }\r\n}\r\n\r\nconst ModalLogin: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ isAuth, login, authError, captchaUrl }) => {\r\n\r\n    const [visible, setVisible] = useState(true)\r\n\r\n    const handleCancel = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Login\"\r\n            visible={visible}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n        >\r\n            <LoginForm login={login} authError={authError} captchaUrl={captchaUrl} isAuth={isAuth}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst LoginForm: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ login, authError, captchaUrl }) => {\r\n\r\n    const onFinish = (values: ValuesLoginType) => {\r\n        login(values)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n\r\n            {authError && <Alert style={{ marginBottom: \"30px\" }}\r\n                                       message={\"Error: \" + `${authError}`}\r\n                                       type=\"error\"\r\n                                       showIcon />}\r\n\r\n            <Form.Item\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                rules={[{ required: true, message: 'Please input your username!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[{ required: true, message: 'Please input your password!' }]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Login\r\n                </Button>\r\n            </Form.Item>\r\n\r\n            { captchaUrl && <Captcha captchaUrl={captchaUrl} /> }\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport type ValuesLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: null | string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    authError: string | null\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (values: ValuesLoginType) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    authError: state.auth.authError,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(ModalLogin)","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileContainer.tsx",["248"],"import React, {useEffect} from 'react'\r\nimport {compose} from 'redux'\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport Profile from './Profile'\r\nimport {actions, getProfileData, getUserStatus, savePhoto, saveProfile, updateStatus} from '../../Redux/profile-reducer'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\nconst ProfileContainer: React.FC<MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>> = ({\r\n                                        profile, authorizedUserId, getProfileData,\r\n                                        getUserStatus, status, updateStatus, isAuth,\r\n                                        savePhoto, saveProfile, error, login, posts, addPost, ...props }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        /* todo: think about initialization (getting userId) */\r\n        let userId: number | null = +props.match.params.userId\r\n\r\n        if (!props.match.params.userId) {\r\n            userId = authorizedUserId\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('ID should be exist in URI params or in a state')\r\n        } else {\r\n            getProfileData(userId)\r\n            getUserStatus(userId)\r\n        }\r\n    })\r\n\r\n    return <Profile {...props}\r\n                    isOwner={!props.match.params.userId}\r\n                    addPost={addPost}\r\n                    profile={profile as ProfileType}\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                    savePhoto={savePhoto}\r\n                    saveProfile={saveProfile}\r\n                    error={error}\r\n                    login={login}\r\n                    posts={posts}/>\r\n}\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToPropsType = {\r\n    getProfileData: (userID: number | null) => void\r\n    getUserStatus: (userID: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    addPost: (post: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    error: state.profilePage.profileChangeError,\r\n    login: state.auth.login,\r\n    posts: state.profilePage.posts\r\n})\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Your component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & {\r\n    someString: string,\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfileData, getUserStatus, updateStatus, savePhoto, saveProfile, addPost: actions.addPost}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Header\\MainHeader.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\SiderMenu\\SiderMenu.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-selectors.ts",["249"],"import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nexport const getInitialized = (state: AppStateType) => {\r\n    return state.app.initialized\r\n}\r\n\r\n","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-selectors.ts",["250"],"import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getAuthError = (state: AppStateType) => {\r\n    return state.auth.authError\r\n}\r\n\r\nexport const getCaptchaUrl = (state: AppStateType) => {\r\n    return state.auth.captchaUrl\r\n}","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\ChatPage.tsx",["251","252"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\Messages.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\AddMessageForm.tsx",["253","254"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Pages\\Chat\\ChatPage2.tsx",[],{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":2,"column":9,"nodeType":"261","messageId":"262","endLine":2,"endColumn":21},{"ruleId":"259","severity":1,"message":"263","line":34,"column":6,"nodeType":"261","messageId":"262","endLine":34,"endColumn":18},{"ruleId":"259","severity":1,"message":"264","line":2,"column":18,"nodeType":"261","messageId":"262","endLine":2,"endColumn":30},{"ruleId":"259","severity":1,"message":"265","line":94,"column":6,"nodeType":"261","messageId":"262","endLine":94,"endColumn":18},{"ruleId":"266","severity":1,"message":"267","line":54,"column":8,"nodeType":"268","endLine":54,"endColumn":10,"suggestions":"269"},{"ruleId":"266","severity":1,"message":"270","line":66,"column":8,"nodeType":"268","endLine":66,"endColumn":29,"suggestions":"271"},{"ruleId":"272","severity":1,"message":"273","line":44,"column":17,"nodeType":"274","endLine":44,"endColumn":83},{"ruleId":"259","severity":1,"message":"275","line":2,"column":10,"nodeType":"261","messageId":"262","endLine":2,"endColumn":17},{"ruleId":"259","severity":1,"message":"260","line":3,"column":10,"nodeType":"261","messageId":"262","endLine":3,"endColumn":22},{"ruleId":"255","replacedBy":"276"},{"ruleId":"257","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":23,"column":19,"nodeType":"280","messageId":"281","endLine":23,"endColumn":42},{"ruleId":"278","severity":1,"message":"279","line":25,"column":20,"nodeType":"280","messageId":"281","endLine":25,"endColumn":52},{"ruleId":"278","severity":1,"message":"279","line":26,"column":21,"nodeType":"280","messageId":"281","endLine":26,"endColumn":54},{"ruleId":"278","severity":1,"message":"279","line":29,"column":20,"nodeType":"280","messageId":"281","endLine":29,"endColumn":64},{"ruleId":"259","severity":1,"message":"282","line":2,"column":19,"nodeType":"261","messageId":"262","endLine":2,"endColumn":29},{"ruleId":"266","severity":1,"message":"283","line":47,"column":8,"nodeType":"268","endLine":47,"endColumn":10,"suggestions":"284"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"285","severity":1,"message":"286","line":63,"column":59,"nodeType":"287","messageId":"288","endLine":63,"endColumn":60},{"ruleId":"259","severity":1,"message":"289","line":72,"column":6,"nodeType":"261","messageId":"262","endLine":72,"endColumn":15},{"ruleId":"259","severity":1,"message":"290","line":1,"column":10,"nodeType":"261","messageId":"262","endLine":1,"endColumn":24},{"ruleId":"259","severity":1,"message":"290","line":1,"column":10,"nodeType":"261","messageId":"262","endLine":1,"endColumn":24},{"ruleId":"259","severity":1,"message":"291","line":1,"column":16,"nodeType":"261","messageId":"262","endLine":1,"endColumn":25},{"ruleId":"259","severity":1,"message":"292","line":2,"column":8,"nodeType":"261","messageId":"262","endLine":2,"endColumn":14},{"ruleId":"259","severity":1,"message":"293","line":3,"column":17,"nodeType":"261","messageId":"262","endLine":3,"endColumn":22},{"ruleId":"259","severity":1,"message":"294","line":6,"column":9,"nodeType":"261","messageId":"262","endLine":6,"endColumn":23},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"@typescript-eslint/no-unused-vars","'AppStateType' is defined but never used.","Identifier","unusedVar","'DispatchType' is defined but never used.","'ActionsTypes' is defined but never used.","'GetStateType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.","ArrayExpression",["297"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["298"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'connect' is defined but never used.",["295"],["296"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'ResultCode' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["299"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'PropsType' is defined but never used.","'createSelector' is defined but never used.","'useEffect' is defined but never used.","'styles' is defined but never used.","'Input' is defined but never used.","'SearchOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"306","text":"307"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"308","text":"309"},"Update the dependencies array to be: [dispatch]",{"range":"310","text":"311"},[1808,1810],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2189,2210],"[filter, currentPage, history]",[1822,1824],"[dispatch]"]