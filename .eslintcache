[{"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\index.tsx":"1","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-reducer.ts":"2","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\redux-store.ts":"3","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Preloader\\Preloader.tsx":"4","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Music\\Music.tsx":"5","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Settings\\Settings.tsx":"6","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\News\\News.tsx":"7","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogsContainer.tsx":"8","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UsersContainer.tsx":"9","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\dialogs-reducer.ts":"10","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\sidebar-reducer.ts":"11","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-reducer.ts":"12","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-reducer.ts":"13","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-selectors.ts":"14","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\hoc\\withAuthRedirect.tsx":"15","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Dialogs.tsx":"16","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\Users.tsx":"17","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\Profile.tsx":"18","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\api.ts":"19","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\object-utils.ts":"20","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\validators\\validators.ts":"21","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\User.tsx":"22","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"23","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx":"24","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\AddPost.tsx":"25","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\FormsControls.tsx":"26","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Message\\Message.tsx":"27","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx":"28","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Button\\ButtonUpload.tsx":"29","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileContainerWithHooks.tsx":"30","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileDataEdit.tsx":"31","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Errors\\404.tsx":"32","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\profile-reducer.ts":"33","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\Captcha.tsx":"34","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Header\\HeaderContainer.tsx":"35","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginForm.tsx":"36","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\security-api.ts":"37","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\profile-api.ts":"38","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\users-api.ts":"39","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\auth-api.ts":"40","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\App.tsx":"41","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"42","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UserSearchForm.tsx":"43","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\CreateAntFields.jsx":"44"},{"size":219,"mtime":1612800021343,"results":"45","hashOfConfig":"46"},{"size":1075,"mtime":1612437976416,"results":"47","hashOfConfig":"46"},{"size":1524,"mtime":1612453539480,"results":"48","hashOfConfig":"46"},{"size":298,"mtime":1611937464195,"results":"49","hashOfConfig":"46"},{"size":178,"mtime":1611663887886,"results":"50","hashOfConfig":"46"},{"size":186,"mtime":1611663887902,"results":"51","hashOfConfig":"46"},{"size":165,"mtime":1611663887869,"results":"52","hashOfConfig":"46"},{"size":1225,"mtime":1612773019612,"results":"53","hashOfConfig":"46"},{"size":3582,"mtime":1612877865517,"results":"54","hashOfConfig":"46"},{"size":1198,"mtime":1612455556361,"results":"55","hashOfConfig":"46"},{"size":242,"mtime":1611648611337,"results":"56","hashOfConfig":"46"},{"size":3108,"mtime":1612437855139,"results":"57","hashOfConfig":"46"},{"size":5120,"mtime":1612876456845,"results":"58","hashOfConfig":"46"},{"size":942,"mtime":1612864370247,"results":"59","hashOfConfig":"46"},{"size":676,"mtime":1612783569561,"results":"60","hashOfConfig":"46"},{"size":2301,"mtime":1612771525100,"results":"61","hashOfConfig":"46"},{"size":2079,"mtime":1612862799145,"results":"62","hashOfConfig":"46"},{"size":1384,"mtime":1612799446452,"results":"63","hashOfConfig":"46"},{"size":453,"mtime":1612429483327,"results":"64","hashOfConfig":"46"},{"size":263,"mtime":1612440273858,"results":"65","hashOfConfig":"46"},{"size":1395,"mtime":1611992458636,"results":"66","hashOfConfig":"46"},{"size":2588,"mtime":1612876049417,"results":"67","hashOfConfig":"46"},{"size":3410,"mtime":1612799337089,"results":"68","hashOfConfig":"46"},{"size":2153,"mtime":1612786296262,"results":"69","hashOfConfig":"46"},{"size":1329,"mtime":1612790949076,"results":"70","hashOfConfig":"46"},{"size":729,"mtime":1612189400643,"results":"71","hashOfConfig":"46"},{"size":361,"mtime":1612458695642,"results":"72","hashOfConfig":"46"},{"size":470,"mtime":1612850771364,"results":"73","hashOfConfig":"46"},{"size":405,"mtime":1611919509534,"results":"74","hashOfConfig":"46"},{"size":2928,"mtime":1612799446466,"results":"75","hashOfConfig":"46"},{"size":2440,"mtime":1612796778481,"results":"76","hashOfConfig":"46"},{"size":373,"mtime":1611919509567,"results":"77","hashOfConfig":"46"},{"size":4309,"mtime":1612796778510,"results":"78","hashOfConfig":"46"},{"size":562,"mtime":1611663887926,"results":"79","hashOfConfig":"46"},{"size":1594,"mtime":1611666743031,"results":"80","hashOfConfig":"46"},{"size":3422,"mtime":1612429986999,"results":"81","hashOfConfig":"46"},{"size":271,"mtime":1612427199846,"results":"82","hashOfConfig":"46"},{"size":1277,"mtime":1612796778614,"results":"83","hashOfConfig":"46"},{"size":885,"mtime":1612879488147,"results":"84","hashOfConfig":"46"},{"size":805,"mtime":1612429483286,"results":"85","hashOfConfig":"46"},{"size":5585,"mtime":1612773019623,"results":"86","hashOfConfig":"46"},{"size":1153,"mtime":1612798028963,"results":"87","hashOfConfig":"46"},{"size":2668,"mtime":1612879001852,"results":"88","hashOfConfig":"46"},{"size":2312,"mtime":1612877108874,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1h6w780",{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"92"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"92"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"92"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\index.tsx",[],["189","190"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\app-reducer.ts",["191","192"],"import { getAuthData } from './auth-reducer'\r\nimport {AppStateType, BaseThunkType, InferActionsType} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\n\r\n// initial state\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\n// reducer\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'APP/SET_INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\n// actions\r\nconst actions = {\r\n    setInitialized: () => ({ type: 'APP/SET_INITIALIZED' } as const)\r\n}\r\n\r\n// definition types for thunks-creators\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n// thunks\r\nexport const initializeApp = (): ThunkType => async (dispatch: any) => {\r\n    await dispatch(getAuthData())\r\n    dispatch(actions.setInitialized())\r\n}\r\n\r\nexport default appReducer","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\redux-store.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Preloader\\Preloader.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Music\\Music.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Settings\\Settings.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\News\\News.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogsContainer.tsx",["193"],"import React from 'react'\r\nimport {actions, ActionsTypes} from '../../Redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\nimport {DialogType, MessageType} from '../../types/types'\r\n\r\nconst DialogsContainer: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ dialogs, messages, addMessage, isAuth }) => {\r\n\r\n    return <Dialogs dialogs={dialogs}\r\n                    messages={messages}\r\n                    addMessage={addMessage} />\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (formData: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage: actions.addMessage}),\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n\r\n","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\dialogs-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\sidebar-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\auth-reducer.ts",["194","195"],"import { ResultCode } from '../api/api'\r\nimport { authAPI } from '../api/auth-api'\r\nimport { securityAPI } from '../api/security-api'\r\nimport {AppStateType, BaseThunkType, InferActionsType} from './redux-store'\r\nimport { Dispatch } from 'redux'\r\nimport {ValuesLoginType} from '../Components/Login/LoginForm'\r\n\r\n// initial state\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    authError: null as string | null,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\n// reducer\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case 'AUTH/SET_AUTH_ERROR':\r\n            return {\r\n                ...state,\r\n                authError: action.payload\r\n            }\r\n        case 'AUTH/GET_CAPTCHA_URL':\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\n// actions\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_USER_DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    setAuthError: (error: string) => ({ type: 'AUTH/SET_AUTH_ERROR', payload: error } as const),\r\n    setCaptchaUrl: (captchaUrl: string) => ({ type: 'AUTH/GET_CAPTCHA_URL', payload: captchaUrl } as const)\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n// thunks-creators\r\nexport const getAuthData = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.getAuthData()\r\n\r\n    if (data.resultCode === ResultCode.Success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (values: ValuesLoginType): ThunkType => async (dispatch: any) => {\r\n    const {email, password, rememberMe, captcha} = values\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCode.Success) {\r\n        dispatch(getAuthData())\r\n    } else if (data.resultCode === ResultCode.CaptchaIsRequried) {\r\n        dispatch(actions.setAuthError('Are you human?'))\r\n        dispatch(getCaptchaUrl())\r\n    } else { dispatch(actions.setAuthError(data.messages[0])) }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.logout()\r\n    data.resultCode === ResultCode.Success\r\n        ? dispatch(actions.setAuthUserData(null, null, null, false))\r\n        : dispatch(actions.setAuthError(data.messages[0]))\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    dispatch(actions.setCaptchaUrl(data.url))\r\n}\r\n\r\nexport default authReducer","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-reducer.ts",["196"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\users-selectors.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Dialogs.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\Users.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\Profile.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\object-utils.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\utils\\validators\\validators.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\User.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["197"],"import React, {useState} from 'react'\r\nimport style from './../Profile.module.css'\r\nimport 'antd/dist/antd.css'\r\nimport {Button, Input, message} from 'antd'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataEdit from './ProfileDataEdit'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    error: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, isOwner, status, updateStatus, savePhoto, saveProfile, error }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onChange = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (values: ProfileType) => {\r\n        await saveProfile(values)\r\n        setEditMode(false)\r\n        if (error !== '') message.error(error)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            <div className={style.avatar}>\r\n                <img src={profile.photos.large || userPhoto} alt='Profile Photo'/>\r\n                {isOwner && <Input type={'file'} onChange={onChange}/>}\r\n            </div>\r\n            {editMode ? <ProfileDataEdit profile={profile} handleSubmit={handleSubmit}\r\n                                         deactivateEditMode={() => setEditMode(false)}/>\r\n                      : <ProfileData profile={profile} status={status} updateStatus={updateStatus}\r\n                                     isOwner={isOwner} activateEditMode={() => setEditMode(true)}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    activateEditMode: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, status, updateStatus, isOwner, activateEditMode }) => {\r\n\r\n    return (\r\n        <div className={style.profileDescription}>\r\n\r\n            {isOwner && <Button type='default' onClick={activateEditMode}>Edit</Button>}\r\n            <h3 className={style.name}>{profile.fullName}</h3>\r\n            <ProfileStatus status={status}\r\n                           updateStatus={updateStatus} />\r\n            <div>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            {profile.lookingForAJob && <div>My skills: {profile.lookingForAJobDescription}</div>}\r\n            <div>About me: {profile.aboutMe}</div>\r\n            <div>\r\n                Contacts:\r\n\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div>\r\n            {contactValue && <div>{contactTitle}: {contactValue}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\Post\\Posts.tsx",["198","199"],"import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../../Redux/redux-store'\r\nimport { PostType } from '../../../../types/types'\r\nimport { Avatar, List, Space } from 'antd'\r\nimport { FieldTimeOutlined, LikeOutlined, StarOutlined } from '@ant-design/icons'\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    login: string | null\r\n}\r\n\r\nconst IconText: React.FC<{ icon: any, text: any }> = ({ icon, text }) => {\r\n    return (\r\n        <Space>\r\n            {React.createElement(icon)}\r\n            {text}\r\n        </Space>\r\n    )\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = React.memo(({ login, posts }) => {\r\n    return (\r\n        <List\r\n            itemLayout=\"vertical\"\r\n            size=\"large\"\r\n            pagination={{\r\n                onChange: page => {\r\n                    console.log(page);\r\n                },\r\n                pageSize: 10,\r\n            }}\r\n            dataSource={posts}\r\n\r\n            renderItem={ (item: any) => (\r\n                <List.Item\r\n                    key={item.id}\r\n                    actions={[\r\n                        <IconText icon={StarOutlined} text=\"156\" key=\"list-vertical-star-o\" />,\r\n                        <IconText icon={LikeOutlined} text={item.likesCount} key=\"list-vertical-like-o\" />,\r\n                        <IconText icon={FieldTimeOutlined} text={item.date} key=\"list-vertical-message\" />,\r\n                    ]}\r\n\r\n                >\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar src={item.avatar} />}\r\n                        title={login}\r\n                        description={item.message}\r\n                    />\r\n                    {item.content}\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n})\r\n\r\n\r\n// type MapStateToPropsType = {\r\n//     posts: Array<PostType>\r\n//     login: string | null\r\n// }\r\n//\r\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         posts: state.profilePage.posts,\r\n//         login: state.auth.login\r\n//     }\r\n// }\r\n//\r\n// let PostsContainer = connect(mapStateToProps, null)(Posts)\r\n\r\nexport default Posts","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\MyPosts\\AddPost.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\FormsControls.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\Message\\Message.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Button\\ButtonUpload.tsx",[],["200","201"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileContainerWithHooks.tsx",["202"],"import React, {useEffect} from 'react'\r\nimport {compose} from 'redux'\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport Profile from './Profile'\r\nimport {actions, getProfileData, getUserStatus, savePhoto, saveProfile, updateStatus} from '../../Redux/profile-reducer'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\nconst ProfileContainerWithHooks: React.FC<MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>> = ({\r\n                                        profile, authorizedUserId, getProfileData,\r\n                                        getUserStatus, status, updateStatus, isAuth,\r\n                                        savePhoto, saveProfile, error, login, posts, addPost, ...props }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        /* todo: think about initialization (getting userId) */\r\n        let userId: number | null = +props.match.params.userId\r\n\r\n        if (!props.match.params.userId) {\r\n            userId = authorizedUserId\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('ID should be exist in URI params or in a state')\r\n        } else {\r\n            getProfileData(userId)\r\n            getUserStatus(userId)\r\n        }\r\n    })\r\n\r\n    return <Profile {...props}\r\n                    isOwner={!props.match.params.userId}\r\n                    addPost={addPost}\r\n                    profile={profile as ProfileType}\r\n                    status={status}\r\n                    updateStatus={updateStatus}\r\n                    savePhoto={savePhoto}\r\n                    saveProfile={saveProfile}\r\n                    error={error}\r\n                    login={login}\r\n                    posts={posts}/>\r\n}\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToPropsType = {\r\n    getProfileData: (userID: number | null) => void\r\n    getUserStatus: (userID: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    addPost: (post: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    error: state.profilePage.profileChangeError,\r\n    login: state.auth.login,\r\n    posts: state.profilePage.posts\r\n})\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Your component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & {\r\n    someString: string,\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfileData, getUserStatus, updateStatus, savePhoto, saveProfile, addPost: actions.addPost}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainerWithHooks)","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileDataEdit.tsx",["203","204","205","206"],"import './ProfileDataEdit.css'\r\nimport 'antd/dist/antd.css'\r\nimport React from 'react'\r\nimport {Button, Form, Input, Select} from 'antd'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\nconst { Option } = Select\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    handleSubmit: (values: ProfileType) => void\r\n    deactivateEditMode: () => void\r\n}\r\n\r\nconst ProfileDataEdit: React.FC<PropsType> = ({ handleSubmit, profile, deactivateEditMode }) => {\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    }\r\n\r\n    const validateMessages = {\r\n        required: '${label} is required!',\r\n        types: {\r\n            email: '${label} is not a valid email!',\r\n            number: '${label} is not a valid number!',\r\n        },\r\n        number: {\r\n            range: '${label} must be between ${min} and ${max}',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Form {...layout} name=\"editProfile\"\r\n              onFinish={handleSubmit}\r\n              validateMessages={validateMessages}\r\n              initialValues={{ ...profile }}>\r\n\r\n            <Form.Item name=\"fullName\" label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"lookingForAJob\" label=\"Looking for a job\" rules={[{ required: true }]}>\r\n                <Select>\r\n                    <Option value={true as any}>Yes</Option>\r\n                    <Option value={false as any}>No</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item name=\"lookingForAJobDescription\" label=\"My skills\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"aboutMe\" label=\"About me\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            {Object.keys(profile.contacts).map(key => {\r\n                return <Form.Item name={['contacts', key]} label={key}>\r\n                            <Input />\r\n                        </Form.Item>\r\n            })}\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n\r\n                <Button htmlType=\"button\" onClick={deactivateEditMode}>\r\n                    Cancel\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ProfileDataEdit","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\Errors\\404.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Redux\\profile-reducer.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\Captcha.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Login\\LoginForm.tsx",["207"],"import 'antd/dist/antd.css'\r\nimport React, { useState } from 'react'\r\nimport { Form, Input, Button, Checkbox, Alert, Modal } from 'antd'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../Redux/auth-reducer'\r\nimport Captcha from './Captcha'\r\nimport { AppStateType } from '../../Redux/redux-store'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 }\r\n}\r\n\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 }\r\n}\r\n\r\nconst ModalLogin: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ isAuth, login, authError, captchaUrl }) => {\r\n\r\n    const [visible, setVisible] = useState(true)\r\n\r\n    const handleCancel = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Login\"\r\n            visible={visible}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n        >\r\n            <LoginForm login={login} authError={authError} captchaUrl={captchaUrl} isAuth={isAuth}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst LoginForm: React.FC<MapStateToPropsType & MapDispatchToPropsType> = ({ login, authError, captchaUrl }) => {\r\n\r\n    const onFinish = (values: ValuesLoginType) => {\r\n        login(values)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n\r\n            {authError && <Alert style={{ marginBottom: \"30px\" }}\r\n                                       message={\"Error: \" + `${authError}`}\r\n                                       type=\"error\"\r\n                                       showIcon />}\r\n\r\n            <Form.Item\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                rules={[{ required: true, message: 'Please input your username!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[{ required: true, message: 'Please input your password!' }]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Login\r\n                </Button>\r\n            </Form.Item>\r\n\r\n            { captchaUrl && <Captcha captchaUrl={captchaUrl} /> }\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport type ValuesLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: null | string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    authError: string | null\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (values: ValuesLoginType) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    authError: state.auth.authError,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(ModalLogin)","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\security-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\profile-api.ts",["208"],"import {PhotosType, ProfileType, ProfileTypeForSave} from '../types/types'\r\nimport {instance, ResultCode, APIResponseType} from './api'\r\n\r\ntype PhotosResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileData(userID: number | null) {\r\n        return instance.get<ProfileType>(`profile/` + userID)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>('profile/status/' + userID)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>('profile/status/', { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(image: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", image);\r\n        return instance.put<APIResponseType<PhotosResponseDataType>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(profile: ProfileTypeForSave) {\r\n        return instance.put<APIResponseType<PhotosResponseDataType>>('profile', profile)\r\n            .then(response => response.data)\r\n    }\r\n}","C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\users-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\api\\auth-api.ts",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\App.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\Users\\UserSearchForm.tsx",["209","210","211"],"C:\\Users\\admin\\WebstormProjects\\react-lessons\\project1\\src\\Components\\common\\FormsControls\\CreateAntFields.jsx",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":2,"column":9,"nodeType":"218","messageId":"219","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"220","line":34,"column":6,"nodeType":"218","messageId":"219","endLine":34,"endColumn":18},{"ruleId":"216","severity":1,"message":"221","line":2,"column":18,"nodeType":"218","messageId":"219","endLine":2,"endColumn":30},{"ruleId":"216","severity":1,"message":"217","line":4,"column":9,"nodeType":"218","messageId":"219","endLine":4,"endColumn":21},{"ruleId":"216","severity":1,"message":"222","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":18},{"ruleId":"216","severity":1,"message":"223","line":94,"column":6,"nodeType":"218","messageId":"219","endLine":94,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":44,"column":17,"nodeType":"226","endLine":44,"endColumn":83},{"ruleId":"216","severity":1,"message":"227","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":17},{"ruleId":"216","severity":1,"message":"217","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":22},{"ruleId":"212","replacedBy":"228"},{"ruleId":"214","replacedBy":"229"},{"ruleId":"216","severity":1,"message":"230","line":72,"column":6,"nodeType":"218","messageId":"219","endLine":72,"endColumn":15},{"ruleId":"231","severity":1,"message":"232","line":23,"column":19,"nodeType":"233","messageId":"234","endLine":23,"endColumn":42},{"ruleId":"231","severity":1,"message":"232","line":25,"column":20,"nodeType":"233","messageId":"234","endLine":25,"endColumn":52},{"ruleId":"231","severity":1,"message":"232","line":26,"column":21,"nodeType":"233","messageId":"234","endLine":26,"endColumn":54},{"ruleId":"231","severity":1,"message":"232","line":29,"column":20,"nodeType":"233","messageId":"234","endLine":29,"endColumn":64},{"ruleId":"235","severity":1,"message":"236","line":63,"column":59,"nodeType":"237","messageId":"238","endLine":63,"endColumn":60},{"ruleId":"216","severity":1,"message":"239","line":2,"column":19,"nodeType":"218","messageId":"219","endLine":2,"endColumn":29},{"ruleId":"216","severity":1,"message":"240","line":4,"column":17,"nodeType":"218","messageId":"219","endLine":4,"endColumn":22},{"ruleId":"216","severity":1,"message":"241","line":5,"column":9,"nodeType":"218","messageId":"219","endLine":5,"endColumn":25},{"ruleId":"216","severity":1,"message":"242","line":25,"column":7,"nodeType":"218","messageId":"219","endLine":25,"endColumn":14},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"@typescript-eslint/no-unused-vars","'AppStateType' is defined but never used.","Identifier","unusedVar","'DispatchType' is defined but never used.","'ActionsTypes' is defined but never used.","'Dispatch' is defined but never used.","'GetStateType' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'connect' is defined but never used.",["243"],["244"],"'PropsType' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'ResultCode' is defined but never used.","'Input' is defined but never used.","'DownloadOutlined' is defined but never used.","'options' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]